@extends('layouts.master')

@section('title')
    Documentation
@endsection

@section('content') 
    <h1>Documentation</h1>
    <h3>ERD</h3>
    <img src='images/ERD-assignment2.jpg'>
    <h3>Description</h3>
    <p>    I was able to complete requirements 1 to 11,13,14,15 and task 2 I have done what I think could be a good option. I was not able to finish the cart which was 12, and recommendation which was 16. Though I have some insights for how to do them. 
        For the first two tasks, I created the login using Laravel/breeze and added two columns address and role. For the 3rd task I created dish migration and seeded data and added details according to requirements, I used auth middleware for authorizing login users, but for specific restaurants, I used if statements in the controller and gave output at cannot access, if not from same restaurant. For 4th I listed restaurant and on clicking them getting the dishes of the restaurant, everyone can see these details, but only authorized users can update and edit. For 5th, I used pagination of bootstrap, but for the links(), I used my own css, since it uses ul li a. For 6th and 7th, customers can single purchase the dish and it takes them to order placed page, and if the restaurants login, they have an option to see the list of orders placed. All the input validation has been done accordingly, but for login and registering there is a client-side validation for not providing input, I could change that by just removing required from those forms, but that looked good so I left that. For 9th I used Rule::unique which made it easier to make unique dish for that restaurant, but it gave an error in the update that name is already in use, then I used ignore in the update in rule::unique for making that work. For 10th, I added a route in web.php with the eloquent showing top 5 popular dishes for the last 30 days. For 30 days, I used Carbon. For 11th, to add images, I created a form and images can be seen by clicking on the dish. For 13th, adding promotion/discount, I provided fields in the dishes table itself, only the restaurant can update their dish, and they can add discount on the dish while adding/updating. For 14th, I created a similar table to users, but it is not connected to any other tables(no relationship), it takes details of the application of the restaurant, and only admin can see the these and approve, as soon as they approve, restaurants details are added in users table and deleted from the application table. For 15th, I added a page to be opened by customers to see their favourite dishes. For 12th, task if I had to do, I could create a table for orders of the dishes then transfer to order table itself, so that the order table has order_id as well which is same for multiple buys from a single user at a time. For 16th, I could use the names in the favourites table and search the whole dish table, with similar names and show them in the recommendation excluding the ones already in the favourite. For task2, I looked up for information on google and provided what I feel could be the best option. 
    </p>
    <h3>Reflection</h3>
    <p> I learnt a lot from this assignment and can create many more similar assignments in much less time, having known the details that could be used. I was able to do this assignment in respectively lesser time than assignment 1, having more functions added that could be used to get outputs in a smaller and easier way. 
    </p>
@endsection